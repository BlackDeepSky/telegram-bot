from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message
from config import BOT_TOKEN
from news_parser import get_news
import asyncio
from aiogram.exceptions import TelegramAPIError

# –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –Ω–æ–≤–æ—Å—Ç–∏
USER_IDS = [1985969754]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ Telegram –∞–∫–∫–∞—É–Ω—Ç–∞

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(commands=['start'])
async def start_command(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –Ω–æ–≤–æ—Å—Ç–∏ –∫–∞–∂–¥—ã–µ 60 –º–∏–Ω—É—Ç.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π
async def send_news():
    while True:
        try:
            news_data = get_news()
            for user_id in USER_IDS:
                for news in news_data:
                    message = (
                        f"‚ú® *{news['category']}*\n\n"
                        f"**–ó–∞–≥–æ–ª–æ–≤–æ–∫:** {news['title']}\n\n"
                        f"üìù *–í—ã–∂–∏–º–∫–∞:* {news['summary']}\n\n"
                        f"üìñ [–ß–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é]({news['url']})"
                    )
                    try:
                        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
                        if news["image_url"]:
                            await bot.send_photo(
                                chat_id=user_id,
                                photo=news["image_url"],
                                caption=message,
                                parse_mode="Markdown"
                            )
                        else:
                            await bot.send_message(
                                user_id,
                                message,
                                parse_mode="Markdown",
                                disable_web_page_preview=True
                            )
                    except TelegramAPIError as e:
                        if "FLOOD_WAIT" in str(e):
                            wait_time = int(str(e).split("FLOOD_WAIT_")[-1])
                            print(f"Flood limit exceeded. Sleep {wait_time} seconds.")
                            await asyncio.sleep(wait_time)
                        else:
                            print(f"Telegram API error: {e}")
                    except Exception as ex:
                        print(f"Error sending news to user {user_id}: {ex}")
            await asyncio.sleep(3600)  # –ñ–¥—ë–º 1 —á–∞—Å
        except Exception as e:
            print(f"Error fetching news: {e}")
            await asyncio.sleep(60)  # –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
async def main():
    await asyncio.gather(
        dp.start_polling(bot),
        send_news()
    )

if __name__ == '__main__':
    asyncio.run(main())